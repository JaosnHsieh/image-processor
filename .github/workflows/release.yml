name: release

on: 
  push:
    tags:
    - '*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OPENCV_VERSION: 4.7.0
jobs:
  build-ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Cache OpenCV
      id: opencv-cache
      uses: actions/cache@v2
      with:
        path: ./opencv-install
        key: ${{ runner.os }}-opencv-cache

    - name: Install OpenCV
      uses: rayandrews/with-opencv-action@v1
      with:  
        dir: ./opencv-install
        cached: ${{ steps.opencv-cache.outputs.cache-hit }}
        opencv-version: ${{ OPENCV_VERSION }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }} (linux)
        body: |
          Test upload-to-github-release works with `actions/create-release`
        draft: true
        prerelease: false
    - uses: xresloader/upload-to-github-release@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "./build/image-processor"
        release_id: ${{ steps.create_release.outputs.id }}
        overwrite: true
        verbose: true


  # build-macos:
  #   # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  #   # You can convert this to a matrix build if you need cross-platform coverage.
  #   # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Cache OpenCV
  #     id: opencv-cache
  #     uses: actions/cache@v2
  #     with:
  #       path: ./opencv-install
  #       key: ${{ runner.os }}-opencv-cache

  #   - name: Install OpenCV
  #     uses: rayandrews/with-opencv-action@v1
  #     with:  
  #       dir: ./opencv-install
  #       cached: ${{ steps.opencv-cache.outputs.cache-hit }}
  #       opencv-version: '4.6.0'

  #   - name: Configure CMake
  #     # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #     # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #     run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

  #   - name: Build
  #     # Build your program with the given configuration
  #     run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  #   - name: Test
  #     working-directory: ${{github.workspace}}/build
  #     # Execute tests defined by the CMake configuration.
  #     # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #     run: ctest -C ${{env.BUILD_TYPE}}
      
  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }} (macos)
  #       body: |
  #         Test upload-to-github-release works with `actions/create-release`
  #       draft: true
  #       prerelease: false
  #   - uses: xresloader/upload-to-github-release@main
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       file: "./build/image-processor"
  #       release_id: ${{ steps.create_release.outputs.id }}
  #       overwrite: true
  #       verbose: true

  # build-windows:
  #   # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  #   # You can convert this to a matrix build if you need cross-platform coverage.
  #   # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Cache OpenCV
  #     id: opencv-cache
  #     uses: actions/cache@v2
  #     with:
  #       path: ./opencv-install
  #       key: ${{ runner.os }}-opencv-cache

  #   - name: Install OpenCV
  #     uses: rayandrews/with-opencv-action@v1
  #     with:  
  #       dir: ./opencv-install
  #       cached: ${{ steps.opencv-cache.outputs.cache-hit }}
  #       opencv-version: '4.6.0'

  #   - name: Configure CMake
  #     # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #     # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #     run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

  #   - name: Build
  #     # Build your program with the given configuration
  #     run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  #   - name: Test
  #     working-directory: ${{github.workspace}}/build
  #     # Execute tests defined by the CMake configuration.
  #     # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #     run: ctest -C ${{env.BUILD_TYPE}}
      
  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }} (windows)
  #       body: |
  #         Test upload-to-github-release works with `actions/create-release`
  #       draft: true
  #       prerelease: false
  #   - uses: xresloader/upload-to-github-release@main
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       file: "./build/image-processor"
  #       release_id: ${{ steps.create_release.outputs.id }}
  #       overwrite: true
  #       verbose: true